AWSTemplateFormatVersion: '2010-09-09'
Description: 'E-Commerce Serverless Architecture - Lambda Resources'

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment name (dev, test, prod)
    AllowedValues:
      - dev
      - test
      - prod
  
  DynamoDBTableName:
    Type: String
    Description: Name of the DynamoDB table
  
  SQSQueueURL:
    Type: String
    Description: URL of the SQS queue
  
  SQSQueueARN:
    Type: String
    Description: ARN of the SQS queue
  
  SNSTopicARN:
    Type: String
    Description: ARN of the SNS topic
  
  LambdaSQSDynamoDBRoleARN:
    Type: String
    Description: ARN of the Lambda SQS DynamoDB Role
  
  LambdaDynamoDBSNSRoleARN:
    Type: String
    Description: ARN of the Lambda DynamoDB SNS Role

Resources:
  # Lambda function that processes SQS messages and writes to DynamoDB
  POCLambda1:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'POC-Lambda-1-${Environment}'
      Handler: index.handler
      Role: !Ref LambdaSQSDynamoDBRoleARN
      Runtime: python3.9
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref DynamoDBTableName
          ENVIRONMENT: !Ref Environment
      Code:
        ZipFile: |
          import boto3, uuid, os

          client = boto3.resource('dynamodb')
          table = client.Table(os.environ['DYNAMODB_TABLE'])

          def lambda_handler(event, context):
              processed_records = 0
              failed_records = 0
              
              for record in event['Records']:
                  try:
                      print(f"Processing record: {record.get('messageId', 'unknown')}")
                      payload = record["body"]
                      print(f"Payload: {str(payload)}")
                      
                      table.put_item(Item={
                          'orderID': str(uuid.uuid4()),
                          'order': payload
                      })
                      processed_records += 1
                      print(f"Successfully processed record")
                      
                  except Exception as e:
                      failed_records += 1
                      print(f"Error processing record: {str(e)}")
                      # Re-raise to trigger SQS retry mechanism
                      raise
              
              print(f"Batch complete. Processed: {processed_records}, Failed: {failed_records}")
              return {
                  'statusCode': 200,
                  'processedRecords': processed_records,
                  'failedRecords': failed_records
              }

      Tags:
        - Key: Environment
          Value: !Ref Environment

  # Lambda function that processes DynamoDB Streams and publishes to SNS
  POCLambda2:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'POC-Lambda-2-${Environment}'
      Handler: index.handler
      Role: !Ref LambdaDynamoDBSNSRoleARN
      Runtime: python3.9
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref SNSTopicARN
          ENVIRONMENT: !Ref Environment
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          from typing import Dict, Any, List

          # Configure SNS client
          client = boto3.client('sns')
          sns_topic_arn = os.environ['SNS_TOPIC_ARN']

          def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
              """
              Process DynamoDB Stream events and publish to SNS.
              
              Args:
                  event: The event dict containing DynamoDB Stream events
                  context: The Lambda context object
                  
              Returns:
                  Dict containing the processing results
              """
              processed_records: List[str] = []
              failed_records: List[str] = []
              
              for record in event["Records"]:
                  try:
                      if record['eventName'] == 'INSERT':
                          new_record = record['dynamodb']['NewImage']
                          record_id = record.get('eventID', 'unknown')
                          
                          print(f"Processing DynamoDB stream record: {record_id}")
                          
                          # Publish to SNS
                          response = client.publish(
                              TopicArn=sns_topic_arn,
                              Message=json.dumps({'default': json.dumps(new_record)}),
                              MessageStructure='json'
                          )
                          
                          processed_records.append(response['MessageId'])
                          print(f"Successfully published to SNS. MessageId: {response['MessageId']}")
                      else:
                          print(f"Skipping record with eventName: {record.get('eventName', 'unknown')}")
                          
                  except Exception as e:
                      record_id = record.get('eventID', 'unknown')
                      failed_records.append(record_id)
                      print(f"Error processing DynamoDB stream record {record_id}: {str(e)}")
                      # Continue processing other records instead of failing the entire batch
              
              print(f"Batch complete. Processed: {len(processed_records)}, Failed: {len(failed_records)}")
              
              return {
                  'statusCode': 200,
                  'body': json.dumps({
                      'processed': processed_records,
                      'failed': failed_records,
                      'totalProcessed': len(processed_records),
                      'totalFailed': len(failed_records)
                  })
              }
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # Event source mapping for SQS to Lambda (POC-Queue trigger)
  SQSEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !Ref SQSQueueARN  # This references the POC-Queue ARN passed from main.yaml
      FunctionName: !GetAtt POCLambda1.Arn

  # Event source mapping for DynamoDB Streams to Lambda
  DynamoDBEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 100
      Enabled: true
      EventSourceArn: !ImportValue 
        Fn::Sub: 'POC-DynamoDB-${Environment}-StreamArn'  # Updated to match the export name in dynamodb.yaml
      FunctionName: !GetAtt POCLambda2.Arn
      StartingPosition: LATEST

Outputs:
  POCLambda1Arn:
    Description: ARN of the first Lambda function
    Value: !GetAtt POCLambda1.Arn
    Export:
      Name: !Sub '${AWS::StackName}-POCLambda1Arn'
  
  POCLambda2Arn:
    Description: ARN of the second Lambda function
    Value: !GetAtt POCLambda2.Arn
    Export:
      Name: !Sub '${AWS::StackName}-POCLambda2Arn'
