AWSTemplateFormatVersion: '2010-09-09'
Description: 'E-Commerce Serverless Architecture - IAM Resources'

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment name (dev, test, prod)
    AllowedValues:
      - dev
      - test
      - prod

Resources:
  # Lambda-Write-DynamoDB policy
  LambdaWriteDynamoDBPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub 'Lambda-Write-DynamoDB-${Environment}'
      Description: 'Policy for Lambda function to write to DynamoDB'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'DynamoDBTableAccess'
            Effect: 'Allow'
            Action:
              - 'dynamodb:PutItem'
              - 'dynamodb:DescribeTable'
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ecommerce-orders-${Environment}'

  # Lambda-SNS-Publish policy
  LambdaSNSPublishPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub 'Lambda-SNS-Publish-${Environment}'
      Description: 'Policy for SNS to get, list, and publish topics that are received by Lambda'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'SNSTopicAccess'
            Effect: 'Allow'
            Action:
              - 'sns:Publish'
              - 'sns:GetTopicAttributes'
            Resource: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:POC-Topic-${Environment}'

  # Lambda-DynamoDBStreams-Read policy
  LambdaDynamoDBStreamsReadPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub 'Lambda-DynamoDBStreams-Read-${Environment}'
      Description: 'Policy for Lambda function to read records from DynamoDB Streams'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'DynamoDBStreamAccess'
            Effect: 'Allow'
            Action:
              - 'dynamodb:GetShardIterator'
              - 'dynamodb:DescribeStream'
              - 'dynamodb:GetRecords'
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ecommerce-orders-${Environment}/stream/*'
          - Sid: 'DynamoDBTableStreamInfo'
            Effect: 'Allow'
            Action:
              - 'dynamodb:ListStreams'
              - 'dynamodb:DescribeTable'
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ecommerce-orders-${Environment}'

  # Lambda-Read-SQS policy
  LambdaReadSQSPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub 'Lambda-Read-SQS-${Environment}'
      Description: 'Policy for Lambda function to read messages from SQS'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'SQSQueueAccess'
            Effect: 'Allow'
            Action:
              - 'sqs:DeleteMessage'
              - 'sqs:ReceiveMessage'
              - 'sqs:GetQueueAttributes'
              - 'sqs:ChangeMessageVisibility'
            Resource: !Sub 'arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:POC-Queue-${Environment}'

  # Lambda basic execution role policy for CloudWatch Logs
  # In AWS Lambda best practices, it is recommended to use a managed policy for CloudWatch Logs
  LambdaBasicExecutionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub 'Lambda-Basic-Execution-${Environment}'
      Description: 'Basic execution policy for Lambda functions to write logs'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: '*'

  # Role for Lambda function that processes SQS messages and writes to DynamoDB (POC-Lambda-1)
  LambdaSQSDynamoDBRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'POC-Lambda-SQS-DynamoDB-Role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref LambdaBasicExecutionPolicy
        - !Ref LambdaReadSQSPolicy
        - !Ref LambdaWriteDynamoDBPolicy
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # Role for Lambda function that processes DynamoDB Streams and publishes to SNS (POC-Lambda-2)
  # In AWS Lambda best practices, it is recommended to use a managed policy for SNS publishing
  LambdaDynamoDBSNSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'POC-Lambda-DynamoDB-SNS-Role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref LambdaBasicExecutionPolicy
        - !Ref LambdaDynamoDBStreamsReadPolicy
        - !Ref LambdaSNSPublishPolicy
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # Policy for API Gateway to send messages to SQS
  APIGatewaySQSPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub 'API-Gateway-SQS-SendMessage-${Environment}'
      Description: 'Policy for API Gateway to send messages to SQS'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'VisualEditor0'
            Effect: 'Allow'
            Action:
              - 'sqs:SendMessage'
            Resource: '*'

  # Role for API Gateway to send messages to SQS. Does not need any additional permissions for CloudWatch Logs
  # In AWS API Gateway best practices, it is recommended to use a managed policy for SQS sending
  APIGatewaySQSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'POC-API-Gateway-SQS-Role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref APIGatewaySQSPolicy
      Tags:
        - Key: Environment
          Value: !Ref Environment

Outputs:
  LambdaSQSDynamoDBRoleARN:
    Description: ARN of the Lambda SQS DynamoDB Role
    Value: !GetAtt LambdaSQSDynamoDBRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaSQSDynamoDBRoleARN'

  LambdaDynamoDBSNSRoleARN:
    Description: ARN of the Lambda DynamoDB SNS Role
    Value: !GetAtt LambdaDynamoDBSNSRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaDynamoDBSNSRoleARN'

  APIGatewaySQSRoleARN:
    Description: ARN of the API Gateway SQS Role
    Value: !GetAtt APIGatewaySQSRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-APIGatewaySQSRoleARN'
